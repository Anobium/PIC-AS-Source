;Program compiled by Great Cow BASIC (0.98.<<>> 2021-02-09 (Windows 64 bit)) for Microchip PIC-AS
;Need help? See the GCBASIC forums at http://sourceforge.net/projects/gcbasic/forums,
;check the documentation or email evan+picas at anobium  dot co dot uk.

;********************************************************************************


;Set up the assembler options (Chip type, clock source, other bits and pieces)
;PROCESSOR   18F16Q41
 PAGEWIDTH   132
 RADIX       DEC
 TITLE       "D:\GCB@Syn39\GreatCowBasic\Demos\vendor_boards\microchip_low_pin_count_demo_board\pickit2_board\18f16q41\240_pwm_fixed_modes.S"
 SUBTITLE    "02-10-2021"

; Reverse lookup file
; C:\Program Files\Microchip\xc8\v2.31\pic\include\proc\pic18f16q41.inc

 #include <xc.inc>

;********************************************************************************
;Explicit PIC-AS constants to resolve the crazyness of the PIC-AS syntax
;These are therefore the same as MPASM
#define BANKED b
#define ACCESS a
#define UPPER low highword

;********************************************************************************
;Explicit CONFIG
 CONFIG  CP = OFF
 CONFIG  WRTSAF = OFF
 CONFIG  WRTD = OFF
 CONFIG  WRTB = OFF
 CONFIG  WDTE = OFF
 CONFIG  XINST = OFF
 CONFIG  LVP = OFF
 CONFIG  MVECEN = OFF
 CONFIG  MCLRE = INTMCLR
 CONFIG  FCMEN = ON
 CONFIG  CLKOUTEN = OFF
 CONFIG  RSTOSC = HFINTOSC_1MHZ
 CONFIG  FEXTOSC = OFF
;Inferred CONFIG
 CONFIG  BBEN=ON
 CONFIG  BBSIZE=BBSIZE_512
 CONFIG  BOREN=OFF
 CONFIG  BORV=VBOR_2P85
 CONFIG  CSWEN=ON
 CONFIG  DEBUG=OFF
 CONFIG  FCMENP=OFF
 CONFIG  FCMENS=OFF
 CONFIG  IVT1WAY=OFF
 CONFIG  LPBOREN=ON
 CONFIG  PPS1WAY=OFF
 CONFIG  PR1WAY=OFF
 CONFIG  PWRTS=PWRT_1
 CONFIG  SAFEN=ON
 CONFIG  STVREN=OFF
 CONFIG  WDTCCS=LFINTOSC
 CONFIG  WDTCPS=WDTCPS_0
 CONFIG  WDTCWS=WDTCWS_0
 CONFIG  WRTAPP=ON
 CONFIG  WRTC=ON
 CONFIG  ZCD=ON

;********************************************************************************

;Set aside RAM memory locations for variables. All variables are global.
 CCPCONCACHE                      EQU 1280                    ; 0X500
 _PWMTIMERSELECTED                EQU 1281                    ; 0X501

;********************************************************************************

 PSECT   RESETVEC,delta=1, abs
 RESETVEC:
;VECTORS
	ORG	0
	GOTO	BASPROGRAMSTART
	ORG	8
	RETFIE

;********************************************************************************

;START OF PROGRAM MEMORY PAGE 0
	ORG	12
BASPROGRAMSTART:
;CALL INITIALISATION ROUTINES
	RCALL	INITSYS
	RCALL	INITPPS
	RCALL	INITPWM

;START OF THE MAIN PROGRAM
;''
;'' This program will enable a 76 Khz PWM signal, with a duty cycle
;'' of 50%. It will emit the signal for 10 seconds, then stop.
;''     #define PWM_Freq 76    'Set frequency in KHz
;''     #define PWM_Duty 50    'Set duty cycle to 80 %
;''
;''@author     EvanV
;''@licence    GPL
;''@version    1.01
;''@date       31.12.2020
;''********************************************************************************
;Generated by PIC PPS Tool for Great Cow Basic
;PPS Tool version: 0.0.6.2
;PinManager data: v1.81.0
;Generated for 18f16q41
;
;Template comment at the start of the config file
;
;#define PPSToolPart 18f16q41
;Template comment at the end of the config file
;' -------------------PORTA----------------
;' Bit#:  -7---6---5---4---3---2---1---0---
;' IO:   -----------------SW----------ADC--
;'-----------------------------------------
;'
;' -------------------PORTB----------------
;' Bit#:  -7---6---5---4---3---2---1---0---
;' IO:    ---------------------------------
;'-----------------------------------------
;'
;' ------------------PORTC-----------------
;' Bit#:  -7---6---5---4---3---2---1---0---
;' IO:    ----TX---------LED--LED-LED LED--
;'-----------------------------------------
;Define constants to make things easier. We can reuse these at any time.
;#DEFINE LEDPORT LATC
;Dir     RC0         Out
	BCF	TRISC,0,ACCESS
;Dir     RC1         Out
	BCF	TRISC,1,ACCESS
;Dir     RC2         Out
	BCF	TRISC,2,ACCESS
;Dir     RC3         Out
	BCF	TRISC,3,ACCESS
;#DEFINE POTENTIOMETER PORTA.0
;Dir     POTENTIOMETER In
	BSF	TRISA,0,ACCESS
;#DEFINE SWITCHIN      PORTA.3
;Dir     SWITCHIN      In
	BSF	TRISA,3,ACCESS
;analogue port selection
;#DEFINE ADCChannelSelected AN0
;#DEFINE ADSpeed LowSpeed
;
;' ------ Start of main Program to provide
;
;#define PWM_Out1 RC0
;
;Do
;'Generate software PWM - 50% duty for 7 pulse
;PWMOut 1, 127, 3
;wait 100 ms
;Loop
;This program will enable a 1 Khz PWM signal, with a duty cycle
;of 90%.
;#define PWM_Freq 1    'Set frequency in KHz
;#define PWM_Duty 50   'Set duty cycle to 50 %
;Default to CCP/PWM1
;PWMOn
	RCALL	PWMON18
;Do
SYSDOLOOP_S1:
;Loop
	BRA	SYSDOLOOP_S1
SYSDOLOOP_E1:
;End
	BRA	BASPROGRAMEND
BASPROGRAMEND:
	SLEEP
	BRA	BASPROGRAMEND

;********************************************************************************

;SOURCE: 240_PWM_FIXED_MODES.GCB (26)
INITPPS:
;Module: CCP1
;RC0PPS = 0x0009    'CCP1 > RC0
	MOVLW	9
BANKSEL	RC0PPS
	MOVWF	RC0PPS,BANKED
;CCP1PPS = 0x0010    'RC0 > CCP1 (bi-directional)
	MOVLW	16
	MOVWF	CCP1PPS,BANKED
;RC1PPS = 0x0009    'CCP1 > RC1
	MOVLW	9
	MOVWF	RC1PPS,BANKED
;CCP1PPS = 0x0011    'RC1 > CCP1 (bi-directional)
	MOVLW	17
	MOVWF	CCP1PPS,BANKED
	BANKSEL	0
	RETURN

;********************************************************************************

;SOURCE: PWM.H (192)
INITPWM:
;_PWMTimerSelected = 2
	MOVLW	2
	MOVWF	_PWMTIMERSELECTED,ACCESS
;Dim PRx_Temp as LONG
;Script to calculate constants required for given Frequency and Duty Cycle
LEGACY_STARTOFFIXEDCCPPWMMODECODE:
;You can disable all the legacy CCPPWM fixed mode code to reduce program size
;This section is Library code, so it generates ASM
;This section uses the constants defined the script above.
;Essentially, sets CCPCONCache with the bits set correctly.
;And, timer 2.  Remember timer 2 can be the timer for CCP/PWM but the other timers can be specified for certain parts.
;If CCP1CON does not exist then there is NO CCP1 so no point in setting, as all this is to set up the CCP1 using constants method
;DIM CCPCONCache as BYTE
;CCPCONCache = 0
	CLRF	CCPCONCACHE,ACCESS
;Set PWM Period
;PR2 = PR2_CPP_PWM_Temp
	MOVLW	250
;A9: ASM Source was:  BANKSEL PR2
BANKSEL	T2PR
;A2: ASM Source was:  MOVWF PR2,BANKED
;A4: ASM Source was:  MOVWF PR2,BANKED
	MOVWF	T2PR,BANKED
;SET T2CON.T2CKPS0 OFF
;A8: ASM Source was:  BCF T2CON,T2CKPS0,BANKED
	BCF	T2CON,4,BANKED
;SET T2CON.T2CKPS1 OFF
;A8: ASM Source was:  BCF T2CON,T2CKPS1,BANKED
	BCF	T2CON,5,BANKED
;SET T2CON.T2CKPS2 ON
;A8: ASM Source was:  BSF T2CON,T2CKPS2,BANKED
	BSF	T2CON,6,BANKED
;Set Duty cycle
;CCPCONCache.CCP1FMT = 1
;A8: ASM Source was:  BSF CCPCONCACHE,CCP1FMT,ACCESS
	BSF	CCPCONCACHE,4,ACCESS
;CCPR1H = DutyCycleH
	MOVLW	125
	MOVWF	CCPR1H,BANKED
;CCPR1L = DutyCycleL*64
	MOVLW	128
;A2: ASM Source was:  MOVWF CCPR1L,BANKED
;A4: ASM Source was:  MOVWF CCPR1L,BANKED
	MOVWF	CCPR1,BANKED
;[canskip]T2CLKCON = 1
	MOVLW	1
	MOVWF	T2CLKCON,BANKED
;[canskip]CCPCONCache.en = 1
;A8: ASM Source was:  BSF CCPCONCACHE,EN,ACCESS
	BSF	CCPCONCACHE,7,ACCESS
;legacy code, replaced by canskip
;Finish preparing CCP*CON
;SET CCPCONCache.CCP1M3 ON
;SET CCPCONCache.CCP1M2 ON
;SET CCPCONCache.CCP1M1 OFF
;SET CCPCONCache.CCP1M0 OFF'
;CCPCONCache.CCP1M3, CCPCONCache.CCP1M2, CCPCONCache.CCP1M1, CCPCONCache.CCP1M0 = b'1100'
;A8: ASM Source was:  BSF CCPCONCACHE,CCP1MODE3,ACCESS
	BSF	CCPCONCACHE,3,ACCESS
;A8: ASM Source was:  BSF CCPCONCACHE,CCP1MODE2,ACCESS
	BSF	CCPCONCACHE,2,ACCESS
;A8: ASM Source was:  BCF CCPCONCACHE,CCP1MODE1,ACCESS
	BCF	CCPCONCACHE,1,ACCESS
;A8: ASM Source was:  BCF CCPCONCACHE,CCP1MODE0,ACCESS
	BCF	CCPCONCACHE,0,ACCESS
;Enable Timer 2
;SET T2CON.TMR2ON ON
;A8: ASM Source was:  BSF T2CON,TMR2ON,BANKED
	BSF	T2CON,7,BANKED
;This is the end of script section, now we use the constants created to updated registers.
STARTOFFIXEDPWMMODECODE:
;Set registers using the constants from script
;This is repeated for timer 2, 4 and 6 - and the two timer variants and the 9 PWM channels
;This uses the user defined constants to set the appropiate registers.
SETPWMDUTYCODE:
;This section finally, sets the Duty using the constants from the script.
;This uses the user defined constants to set the appropiate registers.
REV2018_ENDOFFIXEDPWMMODECODE:
;This is the end of the fixed PWM Mode handler
	BANKSEL	0
	RETURN

;********************************************************************************

;SOURCE: SYSTEM.H (129)
INITSYS:
;asm showdebug This code block sets the internal oscillator to ChipMHz
;asm showdebug Default settings for microcontrollers with _OSCCON1_
;Default OSCCON1 typically, NOSC HFINTOSC; NDIV 1 - Common as this simply sets the HFINTOSC
;OSCCON1 = 0x60
	MOVLW	96
	MOVWF	OSCCON1,BANKED
;Default value typically, CSWHOLD may proceed; SOSCPWR Low power
;OSCCON3 = 0x00
	CLRF	OSCCON3,BANKED
;Default value typically, MFOEN disabled; LFOEN disabled; ADOEN disabled; SOSCEN disabled; EXTOEN disabled; HFOEN disabled
;OSCEN = 0x00
	CLRF	OSCEN,BANKED
;Default value
;OSCTUNE = 0x00
	CLRF	OSCTUNE,BANKED
;asm showdebug The MCU is a chip family ChipFamily
;Section supports many MCUs, 18FxxK40, 18FxxK42 etc that have NDIV3 bit
;asm showdebug OSCCON type is 101
;Clear NDIV3:0
;NDIV3 = 0
;A8: ASM Source was:  BCF OSCCON1,NDIV3,BANKED
	BCF	OSCCON1,3,BANKED
;NDIV2 = 0
;A8: ASM Source was:  BCF OSCCON1,NDIV2,BANKED
	BCF	OSCCON1,2,BANKED
;NDIV1 = 0
;A8: ASM Source was:  BCF OSCCON1,NDIV1,BANKED
	BCF	OSCCON1,1,BANKED
;NDIV0 = 0
;A8: ASM Source was:  BCF OSCCON1,NDIV0,BANKED
	BCF	OSCCON1,0,BANKED
;OSCFRQ = 0b00000101   '16mhz
	MOVLW	5
	MOVWF	OSCFRQ,BANKED
;asm showdebug _Complete_the_chip_setup_of_BSR,ADCs,ANSEL_and_other_key_setup_registers_or_register_bits
;Clear BSR on ChipFamily16 MCUs
;BSR = 0
	CLRF	BSR,ACCESS
;Clear TBLPTRU on MCUs with this bit as this must be zero
;TBLPTRU = 0
	CLRF	TBLPTRU,ACCESS
;Ensure all ports are set for digital I/O and, turn off A/D
;SET ADFM OFF
BANKSEL	ADCON0
;A8: ASM Source was:  BCF ADCON0,ADFM0,BANKED
	BCF	ADCON0,2,BANKED
;Switch off A/D Var(ADCON0)
;SET ADCON0.ADON OFF
;A8: ASM Source was:  BCF ADCON0,ADON,BANKED
	BCF	ADCON0,7,BANKED
;ANSELA = 0
BANKSEL	ANSELA
	CLRF	ANSELA,BANKED
;ANSELB = 0
	CLRF	ANSELB,BANKED
;ANSELC = 0
	CLRF	ANSELC,BANKED
;Set comparator register bits for many MCUs with register CM2CON0
;C2EN = 0
BANKSEL	CM2CON0
;A8: ASM Source was:  BCF CM2CON0,C2EN,BANKED
	BCF	CM2CON0,7,BANKED
;C1EN = 0
;A8: ASM Source was:  BCF CM1CON0,C1EN,BANKED
	BCF	CM1CON0,7,BANKED
;
;'Turn off all ports
;PORTA = 0
	CLRF	PORTA,ACCESS
;PORTB = 0
	CLRF	PORTB,ACCESS
;PORTC = 0
	CLRF	PORTC,ACCESS
	RETURN

;********************************************************************************

;OVERLOADED SIGNATURE: , SOURCE: PWM.H (2185)
PWMON18:
;CCP1CON = CCPCONCache
	MOVFF	CCPCONCACHE,CCP1CON
	RETURN

;********************************************************************************

	ALIGN	2;X2
;
; Declare Power-On-Reset entry point
;
 END     RESETVEC
