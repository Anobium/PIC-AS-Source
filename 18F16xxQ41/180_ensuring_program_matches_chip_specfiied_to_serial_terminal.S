;Program compiled by Great Cow BASIC (0.98.<<>> 2021-02-09 (Windows 64 bit)) for Microchip PIC-AS
;Need help? See the GCBASIC forums at http://sourceforge.net/projects/gcbasic/forums,
;check the documentation or email evan+picas at anobium  dot co dot uk.

;********************************************************************************


;Set up the assembler options (Chip type, clock source, other bits and pieces)
;PROCESSOR   18F16Q41
 PAGEWIDTH   132
 RADIX       DEC
 TITLE       "D:\GCB@Syn39\GreatCowBasic\Demos\vendor_boards\microchip_low_pin_count_demo_board\pickit2_board\18f16q41\180_ensuring_program_matches_chip_specfiied_to_serial_terminal.S"
 SUBTITLE    "02-10-2021"

; Reverse lookup file
; C:\Program Files\Microchip\xc8\v2.31\pic\include\proc\pic18f16q41.inc

 #include <xc.inc>

;********************************************************************************
;Explicit PIC-AS constants to resolve the crazyness of the PIC-AS syntax
;These are therefore the same as MPASM
#define BANKED b
#define ACCESS a
#define UPPER low highword

;********************************************************************************
;Explicit CONFIG
 CONFIG  CP = OFF
 CONFIG  WRTSAF = OFF
 CONFIG  WRTD = OFF
 CONFIG  WRTB = OFF
 CONFIG  WDTE = OFF
 CONFIG  XINST = OFF
 CONFIG  LVP = OFF
 CONFIG  MVECEN = OFF
 CONFIG  MCLRE = INTMCLR
 CONFIG  FCMEN = ON
 CONFIG  CLKOUTEN = OFF
 CONFIG  RSTOSC = HFINTOSC_1MHZ
 CONFIG  FEXTOSC = OFF
;Inferred CONFIG
 CONFIG  BBEN=ON
 CONFIG  BBSIZE=BBSIZE_512
 CONFIG  BOREN=OFF
 CONFIG  BORV=VBOR_2P85
 CONFIG  CSWEN=ON
 CONFIG  DEBUG=OFF
 CONFIG  FCMENP=OFF
 CONFIG  FCMENS=OFF
 CONFIG  IVT1WAY=OFF
 CONFIG  LPBOREN=ON
 CONFIG  PPS1WAY=OFF
 CONFIG  PR1WAY=OFF
 CONFIG  PWRTS=PWRT_1
 CONFIG  SAFEN=ON
 CONFIG  STVREN=OFF
 CONFIG  WDTCCS=LFINTOSC
 CONFIG  WDTCPS=WDTCPS_0
 CONFIG  WDTCWS=WDTCWS_0
 CONFIG  WRTAPP=ON
 CONFIG  WRTC=ON
 CONFIG  ZCD=ON

;********************************************************************************

;Set aside RAM memory locations for variables. All variables are global.
 ASC                              EQU 1289                    ; 0X509
 COMPORT                          EQU 1290                    ; 0X50A
 DELAYTEMP                        EQU 1280                    ; 0X500
 DELAYTEMP2                       EQU 1281                    ; 0X501
 HSERPRINTCRLFCOUNT               EQU 1291                    ; 0X50B
 LTRIM                            EQU 5283                    ; 0X14A3
 MID                              EQU 5242                    ; 0X147A
 PRINTLEN                         EQU 1292                    ; 0X50C
 RTRIM                            EQU 5201                    ; 0X1451
 SERDATA                          EQU 1293                    ; 0X50D
 STRINGPOINTER                    EQU 1294                    ; 0X50E
 SYSARRAYTEMP1                    EQU 1295                    ; 0X50F
 SYSARRAYTEMP2                    EQU 1296                    ; 0X510
 SYSBYTETEMPA                     EQU 1285                    ; 0X505
 SYSBYTETEMPX                     EQU 1280                    ; 0X500
 SYSCALCTEMPA                     EQU 1285                    ; 0X505
 SYSCHAR                          EQU 1297                    ; 0X511
 SYSCHARCOUNT                     EQU 1298                    ; 0X512
 SYSCHARLT                        EQU 1299                    ; 0X513
 SYSCHARLTCOUNT                   EQU 1300                    ; 0X514
 SYSCHARRT                        EQU 1301                    ; 0X515
 SYSCHARRTCOUNT                   EQU 1302                    ; 0X516
 SYSCHARSTART                     EQU 1303                    ; 0X517
 SYSPRINTDATAHANDLER              EQU 1304                    ; 0X518
 SYSPRINTDATAHANDLER_H            EQU 1305                    ; 0X519
 SYSPRINTTEMP                     EQU 1306                    ; 0X51A
 SYSREPEATTEMP1                   EQU 1307                    ; 0X51B
 SYSSTRDATA                       EQU 1308                    ; 0X51C
 SYSSTRINGA                       EQU 1287                    ; 0X507
 SYSSTRINGA_H                     EQU 1288                    ; 0X508
 SYSSTRINGLENGTH                  EQU 1286                    ; 0X506
 SYSSTRINGPARAM1                  EQU 5324                    ; 0X14CC
 SYSSTRINGTEMP                    EQU 1309                    ; 0X51D
 SYSSYSINSTRING2HANDLER           EQU 1310                    ; 0X51E
 SYSSYSINSTRING2HANDLER_H         EQU 1311                    ; 0X51F
 SYSSYSINSTRING3HANDLER           EQU 1312                    ; 0X520
 SYSSYSINSTRING3HANDLER_H         EQU 1313                    ; 0X521
 SYSSYSINSTRINGAHANDLER           EQU 1314                    ; 0X522
 SYSSYSINSTRINGAHANDLER_H         EQU 1315                    ; 0X523
 SYSSYSINSTRINGHANDLER            EQU 1316                    ; 0X524
 SYSSYSINSTRINGHANDLER_H          EQU 1317                    ; 0X525
 SYSTEMP1                         EQU 1318                    ; 0X526
 SYSTEMP2                         EQU 1319                    ; 0X527
 SYSTEMPARRAY                     EQU 5160                    ; 0X1428
 SYSTEMPLT                        EQU 1320                    ; 0X528
 SYSTEMPRT                        EQU 1321                    ; 0X529
 SYSWAITTEMPMS                    EQU 1282                    ; 0X502
 SYSWAITTEMPMS_H                  EQU 1283                    ; 0X503
 SYSWAITTEMPS                     EQU 1284                    ; 0X504
 TRIM                             EQU 5119                    ; 0X13FF
 UCASE                            EQU 5078                    ; 0X13D6

;********************************************************************************

;ALIAS VARIABLES
 AFSR0                            EQU 1257
 AFSR0_H                          EQU 1258
 SYSMID_0                         EQU 5242
 SYSUCASE_0                       EQU 5078

;********************************************************************************

 PSECT   RESETVEC,delta=1, abs
 RESETVEC:
;VECTORS
	ORG	0
	GOTO	BASPROGRAMSTART
	ORG	8
	RETFIE

;********************************************************************************

;START OF PROGRAM MEMORY PAGE 0
	ORG	12
BASPROGRAMSTART:
;CALL INITIALISATION ROUTINES
	RCALL	INITSYS
	RCALL	INITPPS
	RCALL	INITUSART

;START OF THE MAIN PROGRAM
;''
;'' This demonstration will show how you can determine the chip parameters, we show the ChipNameStr
;''
;'' This demonstration how you can check your program is intented for a specific Microcontroller
;''
;''************************************************************************
;''@author  EvanV
;''@licence GPL
;''@version 1.01
;''@date    31.12.2020
;----- Configuration
;----- Configuration
;Chip Settings.
;Generated by PIC PPS Tool for Great Cow Basic
;PPS Tool version: 0.0.6.1
;PinManager data: v1.79.0
;Generated for 18F16Q41
;
;Template comment at the start of the config file
;
;#define PPSToolPart 18F16Q41
;Template comment at the end of the config file
;' -------------------PORTA----------------
;' Bit#:  -7---6---5---4---3---2---1---0---
;' IO:   ---------------------SW------ADC--
;'-----------------------------------------
;'
;' -------------------PORTB----------------
;' Bit#:  -7---6---5---4---3---2---1---0---
;' IO:    ---------------------------------
;'-----------------------------------------
;'
;' ------------------PORTC-----------------
;' Bit#:  -7---6---5---4---3---2---1---0---
;' IO:    ---------------LED--LED-LED LED--
;'-----------------------------------------
;Define constants to make things easier. We can reuse these at any time.
;#DEFINE LEDPORT LATC
;Dir     RC0         Out
	BCF	TRISC,0,ACCESS
;Dir     RC1         Out
	BCF	TRISC,1,ACCESS
;Dir     RC2         Out
	BCF	TRISC,2,ACCESS
;Dir     RC3         Out
	BCF	TRISC,3,ACCESS
;#DEFINE POTENTIOMETER PORTA.0
;Dir     POTENTIOMETER In
	BSF	TRISA,0,ACCESS
;#DEFINE SWITCHIN      PORTA.2
;Dir     SWITCHIN      In
	BSF	TRISA,2,ACCESS
;Setup Serial port
;#DEFINE USART_BAUD_RATE 9600
;#DEFINE USART_TX_BLOCKING
;*****************************************************************************************************
;Main program commences here.. everything before this is setup for the board.
;Now assumes Serial Terminal is operational
;HSerPrintCRLF
	MOVLW	1
	MOVWF	HSERPRINTCRLFCOUNT,ACCESS
	MOVLW	1
	MOVWF	COMPORT,ACCESS
	RCALL	HSERPRINTCRLF
;HSerPrint  ChipNameStr + " Great Cow BASIC Demo"
	LFSR	1,SYSSTRINGPARAM1
	CLRF	SYSSTRINGLENGTH,ACCESS
	MOVLW	LOW STRINGTABLE69
;A2: ASM Source was:  MOVWF TBLPTRL,ACCESS
;A4: ASM Source was:  MOVWF TBLPTRL,ACCESS
	MOVWF	TBLPTR,ACCESS
	MOVLW	HIGH STRINGTABLE69
	MOVWF	TBLPTRH,ACCESS
	MOVLW	UPPER STRINGTABLE69
	MOVWF	TBLPTRU,ACCESS
	RCALL	SYSREADSTRINGPART
	MOVLW	LOW STRINGTABLE1
;A2: ASM Source was:  MOVWF TBLPTRL,ACCESS
;A4: ASM Source was:  MOVWF TBLPTRL,ACCESS
	MOVWF	TBLPTR,ACCESS
	MOVLW	HIGH STRINGTABLE1
	MOVWF	TBLPTRH,ACCESS
	MOVLW	UPPER STRINGTABLE1
	MOVWF	TBLPTRU,ACCESS
	RCALL	SYSREADSTRINGPART
	LFSR	0,SYSSTRINGPARAM1
	MOVFF	SYSSTRINGLENGTH, INDF0
	MOVLW	LOW SYSSTRINGPARAM1
	MOVWF	SYSPRINTDATAHANDLER,ACCESS
	MOVLW	HIGH SYSSTRINGPARAM1
	MOVWF	SYSPRINTDATAHANDLER_H,ACCESS
	MOVLW	1
	MOVWF	COMPORT,ACCESS
	RCALL	HSERPRINT294
;HSerPrintCRLF
	MOVLW	1
	MOVWF	HSERPRINTCRLFCOUNT,ACCESS
	MOVLW	1
	MOVWF	COMPORT,ACCESS
	RCALL	HSERPRINTCRLF
;Wait 1 s
	MOVLW	1
	MOVWF	SYSWAITTEMPS,ACCESS
	RCALL	DELAY_S
;If Trim( UCase( "18F16Q41") )  <> ChipNameStr Then
	LFSR	1,SYSSTRINGPARAM1
	MOVLW	LOW STRINGTABLE2
;A2: ASM Source was:  MOVWF TBLPTRL,ACCESS
;A4: ASM Source was:  MOVWF TBLPTRL,ACCESS
	MOVWF	TBLPTR,ACCESS
	MOVLW	HIGH STRINGTABLE2
	MOVWF	TBLPTRH,ACCESS
	MOVLW	UPPER STRINGTABLE2
	MOVWF	TBLPTRU,ACCESS
	RCALL	SYSREADSTRING
	MOVLW	LOW SYSSTRINGPARAM1
	MOVWF	SYSSYSINSTRINGHANDLER,ACCESS
	MOVLW	HIGH SYSSTRINGPARAM1
	MOVWF	SYSSYSINSTRINGHANDLER_H,ACCESS
	RCALL	FN_UCASE
	MOVLW	LOW UCASE
	MOVWF	SYSSYSINSTRINGHANDLER,ACCESS
	MOVLW	HIGH UCASE
	MOVWF	SYSSYSINSTRINGHANDLER_H,ACCESS
	RCALL	FN_TRIM
	LFSR	1,SYSTEMPARRAY
	MOVLW	LOW STRINGTABLE69
;A2: ASM Source was:  MOVWF TBLPTRL,ACCESS
;A4: ASM Source was:  MOVWF TBLPTRL,ACCESS
	MOVWF	TBLPTR,ACCESS
	MOVLW	HIGH STRINGTABLE69
	MOVWF	TBLPTRH,ACCESS
	MOVLW	UPPER STRINGTABLE69
	MOVWF	TBLPTRU,ACCESS
	RCALL	SYSREADSTRING
	LFSR	0,TRIM
	LFSR	1,SYSTEMPARRAY
	RCALL	SYSCOMPEQUALSTRING
	COMF	SYSBYTETEMPX,F,ACCESS
	BTFSS	SYSBYTETEMPX,0,ACCESS
	BRA	ELSE1_1
;HSerPrint "Wrong Microcontroller program intended for 18F16Q41"
	LFSR	1,SYSSTRINGPARAM1
	MOVLW	LOW STRINGTABLE3
;A2: ASM Source was:  MOVWF TBLPTRL,ACCESS
;A4: ASM Source was:  MOVWF TBLPTRL,ACCESS
	MOVWF	TBLPTR,ACCESS
	MOVLW	HIGH STRINGTABLE3
	MOVWF	TBLPTRH,ACCESS
	MOVLW	UPPER STRINGTABLE3
	MOVWF	TBLPTRU,ACCESS
	RCALL	SYSREADSTRING
	MOVLW	LOW SYSSTRINGPARAM1
	MOVWF	SYSPRINTDATAHANDLER,ACCESS
	MOVLW	HIGH SYSSTRINGPARAM1
	MOVWF	SYSPRINTDATAHANDLER_H,ACCESS
	MOVLW	1
	MOVWF	COMPORT,ACCESS
	RCALL	HSERPRINT294
;HSerPrintCRLF
	MOVLW	1
	MOVWF	HSERPRINTCRLFCOUNT,ACCESS
	MOVLW	1
	MOVWF	COMPORT,ACCESS
	RCALL	HSERPRINTCRLF
;HSerPrint "The Microcontroller is a "+ChipNameStr
	LFSR	1,SYSSTRINGPARAM1
	CLRF	SYSSTRINGLENGTH,ACCESS
	MOVLW	LOW STRINGTABLE4
;A2: ASM Source was:  MOVWF TBLPTRL,ACCESS
;A4: ASM Source was:  MOVWF TBLPTRL,ACCESS
	MOVWF	TBLPTR,ACCESS
	MOVLW	HIGH STRINGTABLE4
	MOVWF	TBLPTRH,ACCESS
	MOVLW	UPPER STRINGTABLE4
	MOVWF	TBLPTRU,ACCESS
	RCALL	SYSREADSTRINGPART
	MOVLW	LOW STRINGTABLE69
;A2: ASM Source was:  MOVWF TBLPTRL,ACCESS
;A4: ASM Source was:  MOVWF TBLPTRL,ACCESS
	MOVWF	TBLPTR,ACCESS
	MOVLW	HIGH STRINGTABLE69
	MOVWF	TBLPTRH,ACCESS
	MOVLW	UPPER STRINGTABLE69
	MOVWF	TBLPTRU,ACCESS
	RCALL	SYSREADSTRINGPART
	LFSR	0,SYSSTRINGPARAM1
	MOVFF	SYSSTRINGLENGTH, INDF0
	MOVLW	LOW SYSSTRINGPARAM1
	MOVWF	SYSPRINTDATAHANDLER,ACCESS
	MOVLW	HIGH SYSSTRINGPARAM1
	MOVWF	SYSPRINTDATAHANDLER_H,ACCESS
	MOVLW	1
	MOVWF	COMPORT,ACCESS
	RCALL	HSERPRINT294
;HSerPrintCRLF
	MOVLW	1
	MOVWF	HSERPRINTCRLFCOUNT,ACCESS
	MOVLW	1
	MOVWF	COMPORT,ACCESS
	RCALL	HSERPRINTCRLF
;Wait While TRUE
SYSWAITLOOP1:
	BRA	SYSWAITLOOP1
;Else
	BRA	ENDIF1
ELSE1_1:
;HSerPrint "The Microcontroller program intended for the "+ChipNameStr
	LFSR	1,SYSSTRINGPARAM1
	CLRF	SYSSTRINGLENGTH,ACCESS
	MOVLW	LOW STRINGTABLE5
;A2: ASM Source was:  MOVWF TBLPTRL,ACCESS
;A4: ASM Source was:  MOVWF TBLPTRL,ACCESS
	MOVWF	TBLPTR,ACCESS
	MOVLW	HIGH STRINGTABLE5
	MOVWF	TBLPTRH,ACCESS
	MOVLW	UPPER STRINGTABLE5
	MOVWF	TBLPTRU,ACCESS
	RCALL	SYSREADSTRINGPART
	MOVLW	LOW STRINGTABLE69
;A2: ASM Source was:  MOVWF TBLPTRL,ACCESS
;A4: ASM Source was:  MOVWF TBLPTRL,ACCESS
	MOVWF	TBLPTR,ACCESS
	MOVLW	HIGH STRINGTABLE69
	MOVWF	TBLPTRH,ACCESS
	MOVLW	UPPER STRINGTABLE69
	MOVWF	TBLPTRU,ACCESS
	RCALL	SYSREADSTRINGPART
	LFSR	0,SYSSTRINGPARAM1
	MOVFF	SYSSTRINGLENGTH, INDF0
	MOVLW	LOW SYSSTRINGPARAM1
	MOVWF	SYSPRINTDATAHANDLER,ACCESS
	MOVLW	HIGH SYSSTRINGPARAM1
	MOVWF	SYSPRINTDATAHANDLER_H,ACCESS
	MOVLW	1
	MOVWF	COMPORT,ACCESS
	RCALL	HSERPRINT294
;HSerPrintCRLF
	MOVLW	1
	MOVWF	HSERPRINTCRLFCOUNT,ACCESS
	MOVLW	1
	MOVWF	COMPORT,ACCESS
	RCALL	HSERPRINTCRLF
;Wait While TRUE
SYSWAITLOOP2:
	BRA	SYSWAITLOOP2
;End If
ENDIF1:
;End
	BRA	BASPROGRAMEND
;----- Support methods.  Subroutines and Functions
BASPROGRAMEND:
	SLEEP
	BRA	BASPROGRAMEND

;********************************************************************************

;SOURCE: STRING.H (523)
FN_ASC:
;Asc = 0
	CLRF	ASC,ACCESS
;Get length of string, don't try _asc ing if it's empty
;SysCharCount = SysInStringA(0)
;A6: ASM Source was:  MOVFF SYSSYSINSTRINGAHANDLER,AFSR0
	MOVFF	SYSSYSINSTRINGAHANDLER,FSR0
;A6: ASM Source was:  MOVFF SYSSYSINSTRINGAHANDLER_H,AFSR0_H
	MOVFF	SYSSYSINSTRINGAHANDLER_H,FSR0H
	MOVFF	INDF0,SYSCHARCOUNT
;If SysCharCount = 0 Then Exit Function
	MOVF	SYSCHARCOUNT,F,ACCESS
;A8: ASM Source was:  BTFSC STATUS, Z,ACCESS
	BTFSC	STATUS,2,ACCESS
	RETURN
;if Syschar > SysCharCount Then Exit Function
	MOVF	SYSCHAR,W,ACCESS
	SUBWF	SYSCHARCOUNT,W,ACCESS
;A8: ASM Source was:  BTFSS STATUS, C,ACCESS
	BTFSS	STATUS,0,ACCESS
	RETURN
;Get first char of string, only first character is of interest, Syschar if provided
;Asc = SysInStringA( Syschar )
	MOVF	SYSCHAR,W,ACCESS
	ADDWF	SYSSYSINSTRINGAHANDLER,W,ACCESS
;A2: ASM Source was:  MOVWF AFSR0,ACCESS
;A4: ASM Source was:  MOVWF AFSR0,ACCESS
	MOVWF	FSR0,ACCESS
	MOVLW	0
	ADDWFC	SYSSYSINSTRINGAHANDLER_H,W,ACCESS
;A2: ASM Source was:  MOVWF AFSR0_H,ACCESS
;A4: ASM Source was:  MOVWF AFSR0_H,ACCESS
	MOVWF	FSR0H,ACCESS
	MOVFF	INDF0,ASC
	RETURN

;********************************************************************************

DELAY_MS:
	INCF	SYSWAITTEMPMS_H, F,ACCESS
DMS_START:
	MOVLW	129
	MOVWF	DELAYTEMP2,ACCESS
DMS_OUTER:
	MOVLW	40
	MOVWF	DELAYTEMP,ACCESS
DMS_INNER:
	DECFSZ	DELAYTEMP, F,ACCESS
	BRA	DMS_INNER
	DECFSZ	DELAYTEMP2, F,ACCESS
	BRA	DMS_OUTER
	DECFSZ	SYSWAITTEMPMS, F,ACCESS
	BRA	DMS_START
	DECFSZ	SYSWAITTEMPMS_H, F,ACCESS
	BRA	DMS_START
	RETURN

;********************************************************************************

DELAY_S:
DS_START:
	MOVLW	232
	MOVWF	SYSWAITTEMPMS,ACCESS
	MOVLW	3
	MOVWF	SYSWAITTEMPMS_H,ACCESS
	RCALL	DELAY_MS
	DECFSZ	SYSWAITTEMPS, F,ACCESS
	BRA	DS_START
	RETURN

;********************************************************************************

;OVERLOADED SIGNATURE: STRING:BYTE:, SOURCE: USART.H (1382)
HSERPRINT294:
;PrintLen = PrintData(0)
;A6: ASM Source was:  MOVFF SYSPRINTDATAHANDLER,AFSR0
	MOVFF	SYSPRINTDATAHANDLER,FSR0
;A6: ASM Source was:  MOVFF SYSPRINTDATAHANDLER_H,AFSR0_H
	MOVFF	SYSPRINTDATAHANDLER_H,FSR0H
	MOVFF	INDF0,PRINTLEN
;If PrintLen <> 0 then
	MOVF	PRINTLEN,F,ACCESS
;A8: ASM Source was:  BTFSC STATUS, Z,ACCESS
	BTFSC	STATUS,2,ACCESS
	BRA	ENDIF14
;Write Data
;for SysPrintTemp = 1 to PrintLen
	CLRF	SYSPRINTTEMP,ACCESS
	MOVLW	1
	SUBWF	PRINTLEN,W,ACCESS
;A8: ASM Source was:  BTFSS STATUS, C,ACCESS
	BTFSS	STATUS,0,ACCESS
	BRA	SYSFORLOOPEND3
SYSFORLOOP3:
	INCF	SYSPRINTTEMP,F,ACCESS
;HSerSend(PrintData(SysPrintTemp),comport )
	MOVF	SYSPRINTTEMP,W,ACCESS
	ADDWF	SYSPRINTDATAHANDLER,W,ACCESS
;A2: ASM Source was:  MOVWF AFSR0,ACCESS
;A4: ASM Source was:  MOVWF AFSR0,ACCESS
	MOVWF	FSR0,ACCESS
	MOVLW	0
	ADDWFC	SYSPRINTDATAHANDLER_H,W,ACCESS
;A2: ASM Source was:  MOVWF AFSR0_H,ACCESS
;A4: ASM Source was:  MOVWF AFSR0_H,ACCESS
	MOVWF	FSR0H,ACCESS
	MOVFF	INDF0,SERDATA
	RCALL	HSERSEND284
;next
	MOVF	PRINTLEN,W,ACCESS
	SUBWF	SYSPRINTTEMP,W,ACCESS
;A8: ASM Source was:  BTFSS STATUS, C,ACCESS
	BTFSS	STATUS,0,ACCESS
	BRA	SYSFORLOOP3
SYSFORLOOPEND3:
;End If
ENDIF14:
;CR
	RETURN

;********************************************************************************

;SOURCE: USART.H (1538)
HSERPRINTCRLF:
;repeat HSerPrintCRLFCount
	MOVFF	HSERPRINTCRLFCOUNT,SYSREPEATTEMP1
	MOVF	SYSREPEATTEMP1,F,ACCESS
;A8: ASM Source was:  BTFSC STATUS, Z,ACCESS
	BTFSC	STATUS,2,ACCESS
	BRA	SYSREPEATLOOPEND1
SYSREPEATLOOP1:
;HSerSend(13,comport)
	MOVLW	13
	MOVWF	SERDATA,ACCESS
	RCALL	HSERSEND284
;HSerSend(10,comport)
	MOVLW	10
	MOVWF	SERDATA,ACCESS
	RCALL	HSERSEND284
;end Repeat
	DECFSZ	SYSREPEATTEMP1,F,ACCESS
	BRA	SYSREPEATLOOP1
SYSREPEATLOOPEND1:
	RETURN

;********************************************************************************

;OVERLOADED SIGNATURE: BYTE:BYTE:, SOURCE: USART.H (848)
HSERSEND284:
;Registers/Bits determined by #samevar at top of library
;if comport = 1 Then
	DECF	COMPORT,W,ACCESS
;A8: ASM Source was:  BTFSS STATUS, Z,ACCESS
	BTFSS	STATUS,2,ACCESS
	BRA	ENDIF28
;USART_TX_BLOCKING
;Wait While TXIF = Off
SYSWAITLOOP3:
;A8: ASM Source was:  BTFSS PIR4,U1TXIF,ACCESS
	BTFSS	PIR4,1,ACCESS
	BRA	SYSWAITLOOP3
;ensure any previous operation has completed
;Wait until TRMT = 1
SYSWAITLOOP4:
BANKSEL	U1ERRIR
;A8: ASM Source was:  BTFSS U1ERRIR,TXMTIF,BANKED
	BTFSS	U1ERRIR,7,BANKED
	BRA	SYSWAITLOOP4
;Write the data byte to the USART.
;Sets register to value of SerData - where register could be TXREG or TXREG1 or U1TXB set via the #samevar
;TXREG = SerData
	MOVFF	SERDATA,U1TXB
;Add USART_DELAY after the byte is sent by the USART module
;Wait USART_DELAY
	MOVLW	1
	MOVWF	SYSWAITTEMPMS,ACCESS
	CLRF	SYSWAITTEMPMS_H,ACCESS
	BANKSEL	0
	RCALL	DELAY_MS
;end if
ENDIF28:
	RETURN

;********************************************************************************

;SOURCE: 180_ENSURING_PROGRAM_MATCHES_CHIP_SPECFIIED_TO_SERIAL_TERMINAL.GCB (28)
INITPPS:
;Module: UART pin directions
;Dir PORTC.6 Out    ' Make TX1 pin an output
	BCF	TRISC,6,ACCESS
;Module: UART1
;RC6PPS = 0x0010    'TX1 > RC6
	MOVLW	16
BANKSEL	RC6PPS
	MOVWF	RC6PPS,BANKED
	BANKSEL	0
	RETURN

;********************************************************************************

;SOURCE: SYSTEM.H (129)
INITSYS:
;asm showdebug This code block sets the internal oscillator to ChipMHz
;asm showdebug Default settings for microcontrollers with _OSCCON1_
;Default OSCCON1 typically, NOSC HFINTOSC; NDIV 1 - Common as this simply sets the HFINTOSC
;OSCCON1 = 0x60
	MOVLW	96
	MOVWF	OSCCON1,BANKED
;Default value typically, CSWHOLD may proceed; SOSCPWR Low power
;OSCCON3 = 0x00
	CLRF	OSCCON3,BANKED
;Default value typically, MFOEN disabled; LFOEN disabled; ADOEN disabled; SOSCEN disabled; EXTOEN disabled; HFOEN disabled
;OSCEN = 0x00
	CLRF	OSCEN,BANKED
;Default value
;OSCTUNE = 0x00
	CLRF	OSCTUNE,BANKED
;asm showdebug The MCU is a chip family ChipFamily
;Section supports many MCUs, 18FxxK40, 18FxxK42 etc that have NDIV3 bit
;asm showdebug OSCCON type is 101
;Clear NDIV3:0
;NDIV3 = 0
;A8: ASM Source was:  BCF OSCCON1,NDIV3,BANKED
	BCF	OSCCON1,3,BANKED
;NDIV2 = 0
;A8: ASM Source was:  BCF OSCCON1,NDIV2,BANKED
	BCF	OSCCON1,2,BANKED
;NDIV1 = 0
;A8: ASM Source was:  BCF OSCCON1,NDIV1,BANKED
	BCF	OSCCON1,1,BANKED
;NDIV0 = 0
;A8: ASM Source was:  BCF OSCCON1,NDIV0,BANKED
	BCF	OSCCON1,0,BANKED
;OSCFRQ = 0b00001000  '64mhz
	MOVLW	8
	MOVWF	OSCFRQ,BANKED
;asm showdebug _Complete_the_chip_setup_of_BSR,ADCs,ANSEL_and_other_key_setup_registers_or_register_bits
;Clear BSR on ChipFamily16 MCUs
;BSR = 0
	CLRF	BSR,ACCESS
;Clear TBLPTRU on MCUs with this bit as this must be zero
;TBLPTRU = 0
	CLRF	TBLPTRU,ACCESS
;Ensure all ports are set for digital I/O and, turn off A/D
;SET ADFM OFF
BANKSEL	ADCON0
;A8: ASM Source was:  BCF ADCON0,ADFM0,BANKED
	BCF	ADCON0,2,BANKED
;Switch off A/D Var(ADCON0)
;SET ADCON0.ADON OFF
;A8: ASM Source was:  BCF ADCON0,ADON,BANKED
	BCF	ADCON0,7,BANKED
;ANSELA = 0
BANKSEL	ANSELA
	CLRF	ANSELA,BANKED
;ANSELB = 0
	CLRF	ANSELB,BANKED
;ANSELC = 0
	CLRF	ANSELC,BANKED
;Set comparator register bits for many MCUs with register CM2CON0
;C2EN = 0
BANKSEL	CM2CON0
;A8: ASM Source was:  BCF CM2CON0,C2EN,BANKED
	BCF	CM2CON0,7,BANKED
;C1EN = 0
;A8: ASM Source was:  BCF CM1CON0,C1EN,BANKED
	BCF	CM1CON0,7,BANKED
;
;'Turn off all ports
;PORTA = 0
	CLRF	PORTA,ACCESS
;PORTB = 0
	CLRF	PORTB,ACCESS
;PORTC = 0
	CLRF	PORTC,ACCESS
	RETURN

;********************************************************************************

;SOURCE: USART.H (539)
INITUSART:
;Set the default value for comport
;comport = 1
	MOVLW	1
	MOVWF	COMPORT,ACCESS
;Set baud rate for for 18fxxK42/K83 series UART
;U1BRGH=SPBRGH_TEMP
	MOVLW	6
BANKSEL	U1BRGH
	MOVWF	U1BRGH,BANKED
;U1BRGL=SPBRGL_TEMP
	MOVLW	129
;A2: ASM Source was:  MOVWF U1BRGL,BANKED
;A4: ASM Source was:  MOVWF U1BRGL,BANKED
	MOVWF	U1BRG,BANKED
;U1BRGS = BRGS1_SCRIPT
;A8: ASM Source was:  BSF U1CON0,U1BRGS,BANKED
	BSF	U1CON0,7,BANKED
;U1TXEN=1   'Enable TX1
;A8: ASM Source was:  BSF U1CON0,U1TXEN,BANKED
	BSF	U1CON0,5,BANKED
;U1RXEN=1   'Enable RX1
;A8: ASM Source was:  BSF U1CON0,U1RXEN,BANKED
	BSF	U1CON0,4,BANKED
;ON_U1CON1=1 'Enable USART1
;A8: ASM Source was:  BSF U1CON1,ON_U1CON1,BANKED
	BSF	U1CON1,7,BANKED
	BANKSEL	0
	RETURN

;********************************************************************************

;SOURCE: STRING.H (456)
FN_LTRIM:
;Get length of string, return empty string.  If you dont do this you will return an uninitialize value... ooops
;Ltrim = ""
	LFSR	1,LTRIM
	MOVLW	LOW STRINGTABLE37
;A2: ASM Source was:  MOVWF TBLPTRL,ACCESS
;A4: ASM Source was:  MOVWF TBLPTRL,ACCESS
	MOVWF	TBLPTR,ACCESS
	MOVLW	HIGH STRINGTABLE37
	MOVWF	TBLPTRH,ACCESS
	MOVLW	UPPER STRINGTABLE37
	MOVWF	TBLPTRU,ACCESS
	RCALL	SYSREADSTRING
;SysCharLTCount = SysInString2(0)
;A6: ASM Source was:  MOVFF SYSSYSINSTRING2HANDLER,AFSR0
	MOVFF	SYSSYSINSTRING2HANDLER,FSR0
;A6: ASM Source was:  MOVFF SYSSYSINSTRING2HANDLER_H,AFSR0_H
	MOVFF	SYSSYSINSTRING2HANDLER_H,FSR0H
	MOVFF	INDF0,SYSCHARLTCOUNT
;If SysCharLTCount = 0 Then Exit Function
	MOVF	SYSCHARLTCOUNT,F,ACCESS
;A8: ASM Source was:  BTFSC STATUS, Z,ACCESS
	BTFSC	STATUS,2,ACCESS
	RETURN
;find first non white space in the string
;SysCharLT = 0
	CLRF	SYSCHARLT,ACCESS
;For SysTempLT = 1 to SysCharLTCount
	CLRF	SYSTEMPLT,ACCESS
	MOVLW	1
	SUBWF	SYSCHARLTCOUNT,W,ACCESS
;A8: ASM Source was:  BTFSS STATUS, C,ACCESS
	BTFSS	STATUS,0,ACCESS
	BRA	SYSFORLOOPEND1
SYSFORLOOP1:
	INCF	SYSTEMPLT,F,ACCESS
;if Asc(Mid (SysInString2, SysTempLT , 1)) <> 32 then
	MOVFF	SYSSYSINSTRING2HANDLER,SYSSYSINSTRINGHANDLER
	MOVFF	SYSSYSINSTRING2HANDLER_H,SYSSYSINSTRINGHANDLER_H
	MOVFF	SYSTEMPLT,SYSCHARSTART
	MOVLW	1
	MOVWF	SYSCHARCOUNT,ACCESS
	RCALL	FN_MID
	MOVLW	LOW MID
	MOVWF	SYSSYSINSTRINGAHANDLER,ACCESS
	MOVLW	HIGH MID
	MOVWF	SYSSYSINSTRINGAHANDLER_H,ACCESS
	MOVLW	1
	MOVWF	SYSCHAR,ACCESS
	RCALL	FN_ASC
	MOVLW	32
	SUBWF	ASC,W,ACCESS
;A8: ASM Source was:  BTFSC STATUS, Z,ACCESS
	BTFSC	STATUS,2,ACCESS
	BRA	ENDIF4
;SysCharLT = SysTempLT
	MOVFF	SYSTEMPLT,SYSCHARLT
;goto FoundNonSpaceChar1
	BRA	FOUNDNONSPACECHAR1
;end if
ENDIF4:
;Next
	MOVF	SYSCHARLTCOUNT,W,ACCESS
	SUBWF	SYSTEMPLT,W,ACCESS
;A8: ASM Source was:  BTFSS STATUS, C,ACCESS
	BTFSS	STATUS,0,ACCESS
	BRA	SYSFORLOOP1
SYSFORLOOPEND1:
FOUNDNONSPACECHAR1:
;if SysCharLT <> 0 then
	MOVF	SYSCHARLT,F,ACCESS
;A8: ASM Source was:  BTFSC STATUS, Z,ACCESS
	BTFSC	STATUS,2,ACCESS
	BRA	ENDIF6
;Ltrim = Mid (SysInString2, SysCharLT )
	MOVFF	SYSSYSINSTRING2HANDLER,SYSSYSINSTRINGHANDLER
	MOVFF	SYSSYSINSTRING2HANDLER_H,SYSSYSINSTRINGHANDLER_H
	MOVFF	SYSCHARLT,SYSCHARSTART
	SETF	SYSCHARCOUNT,ACCESS
	RCALL	FN_MID
	LFSR	1,LTRIM
	LFSR	0,MID
	RCALL	SYSCOPYSTRING
;Exit Function
	RETURN
;end if
ENDIF6:
	RETURN

;********************************************************************************

;SOURCE: STRING.H (393)
FN_MID:
;Empty input?
;If SysInString(0) = 0 Then
;A6: ASM Source was:  MOVFF SYSSYSINSTRINGHANDLER,AFSR0
	MOVFF	SYSSYSINSTRINGHANDLER,FSR0
;A6: ASM Source was:  MOVFF SYSSYSINSTRINGHANDLER_H,AFSR0_H
	MOVFF	SYSSYSINSTRINGHANDLER_H,FSR0H
	MOVF	INDF0,F,ACCESS
;A8: ASM Source was:  BTFSS STATUS, Z,ACCESS
	BTFSS	STATUS,2,ACCESS
	BRA	ENDIF17
;Mid(0) = 0
	BANKSEL	SYSMID_0
	CLRF	SYSMID_0,BANKED
;Exit Function
	BANKSEL	0
	RETURN
;End If
ENDIF17:
;Starting position too low?
;If SysCharStart < 1 Then SysCharStart = 1
	MOVLW	1
	SUBWF	SYSCHARSTART,W,ACCESS
;A8: ASM Source was:  BTFSC STATUS, C,ACCESS
	BTFSC	STATUS,0,ACCESS
	BRA	ENDIF18
	MOVLW	1
	MOVWF	SYSCHARSTART,ACCESS
ENDIF18:
;Starting position too high?
;If SysCharStart > SysInString(0) Then
;A6: ASM Source was:  MOVFF SYSSYSINSTRINGHANDLER,AFSR0
	MOVFF	SYSSYSINSTRINGHANDLER,FSR0
;A6: ASM Source was:  MOVFF SYSSYSINSTRINGHANDLER_H,AFSR0_H
	MOVFF	SYSSYSINSTRINGHANDLER_H,FSR0H
	MOVF	SYSCHARSTART,W,ACCESS
	SUBWF	INDF0,W,ACCESS
;A8: ASM Source was:  BTFSC STATUS, C,ACCESS
	BTFSC	STATUS,0,ACCESS
	BRA	ENDIF19
;Mid(0) = 0
	BANKSEL	SYSMID_0
	CLRF	SYSMID_0,BANKED
;Exit Function
	BANKSEL	0
	RETURN
;End If
ENDIF19:
;Input length too high?
;SysCharStart -= 1
	DECF	SYSCHARSTART,F,ACCESS
;SysStringTemp = SysInString(0) - SysCharStart 'Max number of characters
;A6: ASM Source was:  MOVFF SYSSYSINSTRINGHANDLER,AFSR0
	MOVFF	SYSSYSINSTRINGHANDLER,FSR0
;A6: ASM Source was:  MOVFF SYSSYSINSTRINGHANDLER_H,AFSR0_H
	MOVFF	SYSSYSINSTRINGHANDLER_H,FSR0H
	MOVF	SYSCHARSTART,W,ACCESS
	SUBWF	INDF0,W,ACCESS
	BANKSEL	SYSSTRINGTEMP
	MOVWF	SYSSTRINGTEMP,BANKED
;If SysCharCount > SysStringTemp Then
	MOVF	SYSCHARCOUNT,W,ACCESS
	SUBWF	SYSSTRINGTEMP,W,BANKED
;A8: ASM Source was:  BTFSS STATUS, C,ACCESS
	BTFSS	STATUS,0,ACCESS
;SysCharCount = SysStringTemp
	MOVFF	SYSSTRINGTEMP,SYSCHARCOUNT
;End If
;Copy characters
;For SysStringTemp = 1 To SysCharCount
	CLRF	SYSSTRINGTEMP,BANKED
	MOVLW	1
	SUBWF	SYSCHARCOUNT,W,ACCESS
;A8: ASM Source was:  BTFSS STATUS, C,ACCESS
	BTFSS	STATUS,0,ACCESS
	BRA	SYSFORLOOPEND4
SYSFORLOOP4:
	INCF	SYSSTRINGTEMP,F,BANKED
;Mid(SysStringTemp) = SysInString(SysCharStart + SysStringTemp)
	MOVF	SYSSTRINGTEMP,W,BANKED
	ADDWF	SYSCHARSTART,W,ACCESS
	MOVWF	SYSTEMP1,ACCESS
	ADDWF	SYSSYSINSTRINGHANDLER,W,ACCESS
;A2: ASM Source was:  MOVWF AFSR0,ACCESS
;A4: ASM Source was:  MOVWF AFSR0,ACCESS
	MOVWF	FSR0,ACCESS
	MOVLW	0
	ADDWFC	SYSSYSINSTRINGHANDLER_H,W,ACCESS
;A2: ASM Source was:  MOVWF AFSR0_H,ACCESS
;A4: ASM Source was:  MOVWF AFSR0_H,ACCESS
	MOVWF	FSR0H,ACCESS
	MOVFF	POSTINC0,SYSARRAYTEMP1
	MOVFF	SYSARRAYTEMP1,SYSARRAYTEMP2
	LFSR	0,MID
	MOVF	SYSSTRINGTEMP,W,BANKED
;A2: ASM Source was:  ADDWF AFSR0,F,ACCESS
;A5: ASM Source was:  ADDWF AFSR0,F,ACCESS
	ADDWF	FSR0,F,ACCESS
	MOVLW	0
;A2: ASM Source was:  ADDWFC AFSR0_H,F,ACCESS
;A5: ASM Source was:  ADDWFC AFSR0_H,F,ACCESS
	ADDWFC	FSR0H,F,ACCESS
	MOVFF	SYSARRAYTEMP2,POSTINC0
;Next
	MOVF	SYSCHARCOUNT,W,ACCESS
	SUBWF	SYSSTRINGTEMP,W,BANKED
;A8: ASM Source was:  BTFSS STATUS, C,ACCESS
	BTFSS	STATUS,0,ACCESS
	BRA	SYSFORLOOP4
SYSFORLOOPEND4:
;Mid(0) = SysCharCount
	MOVFFL	SYSCHARCOUNT,SYSMID_0
	BANKSEL	0
	RETURN

;********************************************************************************

;SOURCE: STRING.H (425)
FN_RTRIM:
;Get length of string, return empty string.  If you dont do this you will return an uninitialize value... ooops
;RTrim = ""
	LFSR	1,RTRIM
	MOVLW	LOW STRINGTABLE37
;A2: ASM Source was:  MOVWF TBLPTRL,ACCESS
;A4: ASM Source was:  MOVWF TBLPTRL,ACCESS
	MOVWF	TBLPTR,ACCESS
	MOVLW	HIGH STRINGTABLE37
	MOVWF	TBLPTRH,ACCESS
	MOVLW	UPPER STRINGTABLE37
	MOVWF	TBLPTRU,ACCESS
	RCALL	SYSREADSTRING
;SysCharRTCount = SysInString3(0)
;A6: ASM Source was:  MOVFF SYSSYSINSTRING3HANDLER,AFSR0
	MOVFF	SYSSYSINSTRING3HANDLER,FSR0
;A6: ASM Source was:  MOVFF SYSSYSINSTRING3HANDLER_H,AFSR0_H
	MOVFF	SYSSYSINSTRING3HANDLER_H,FSR0H
	MOVFF	INDF0,SYSCHARRTCOUNT
;If SysCharRTCount = 0 Then Exit Function
	MOVF	SYSCHARRTCOUNT,F,ACCESS
;A8: ASM Source was:  BTFSC STATUS, Z,ACCESS
	BTFSC	STATUS,2,ACCESS
	RETURN
;find first non white space in the string from the Right
;SysCharRT = 0
	CLRF	SYSCHARRT,ACCESS
;For SysTempRT = SysCharRTCount to 1 step -1
	INCF	SYSCHARRTCOUNT,W,ACCESS
	MOVWF	SYSTEMPRT,ACCESS
	MOVLW	1
	SUBWF	SYSCHARRTCOUNT,W,ACCESS
;A8: ASM Source was:  BTFSS STATUS, C,ACCESS
	BTFSS	STATUS,0,ACCESS
	BRA	SYSFORLOOPEND5
SYSFORLOOP5:
	DECF	SYSTEMPRT,F,ACCESS
;was Asc(Mid (SysInString3, SysTempRT , 1))
;if SysInString3(SysTempRT) <> 32 then
	MOVF	SYSTEMPRT,W,ACCESS
	ADDWF	SYSSYSINSTRING3HANDLER,W,ACCESS
;A2: ASM Source was:  MOVWF AFSR0,ACCESS
;A4: ASM Source was:  MOVWF AFSR0,ACCESS
	MOVWF	FSR0,ACCESS
	MOVLW	0
	ADDWFC	SYSSYSINSTRING3HANDLER_H,W,ACCESS
;A2: ASM Source was:  MOVWF AFSR0_H,ACCESS
;A4: ASM Source was:  MOVWF AFSR0_H,ACCESS
	MOVWF	FSR0H,ACCESS
	MOVLW	32
	SUBWF	INDF0,W,ACCESS
;A8: ASM Source was:  BTFSC STATUS, Z,ACCESS
	BTFSC	STATUS,2,ACCESS
	BRA	ENDIF25
;SysCharRT = SysTempRT
	MOVFF	SYSTEMPRT,SYSCHARRT
;goto FoundNonSpaceChar2
	BRA	FOUNDNONSPACECHAR2
;end if
ENDIF25:
;Next
	MOVF	SYSTEMPRT,W,ACCESS
	SUBLW	1
;A8: ASM Source was:  BTFSS STATUS, C,ACCESS
	BTFSS	STATUS,0,ACCESS
	BRA	SYSFORLOOP5
SYSFORLOOPEND5:
FOUNDNONSPACECHAR2:
;if SysCharRT <> 0 then
	MOVF	SYSCHARRT,F,ACCESS
;A8: ASM Source was:  BTFSC STATUS, Z,ACCESS
	BTFSC	STATUS,2,ACCESS
	BRA	ENDIF27
;Rtrim = Mid (SysInString3, 1, SysCharRT )
	MOVFF	SYSSYSINSTRING3HANDLER,SYSSYSINSTRINGHANDLER
	MOVFF	SYSSYSINSTRING3HANDLER_H,SYSSYSINSTRINGHANDLER_H
	MOVLW	1
	MOVWF	SYSCHARSTART,ACCESS
	MOVFF	SYSCHARRT,SYSCHARCOUNT
	RCALL	FN_MID
	LFSR	1,RTRIM
	LFSR	0,MID
	RCALL	SYSCOPYSTRING
;Exit Function
	RETURN
;end if
ENDIF27:
	RETURN

;********************************************************************************

;SOURCE: SYSTEM.H (1674)
SYSCOMPEQUALSTRING:
;Dim SysByteTempA As Byte
;Dim SysByteTempX As Byte
;SysByteTempX = 0
	CLRF	SYSBYTETEMPX,ACCESS
;Check length matches
;movf INDF0, W
	MOVF	INDF0, W,ACCESS
;cpfseq POSTINC1
	CPFSEQ	POSTINC1,ACCESS
;return
	RETURN
;Check if empty
;movf INDF0, F
	MOVF	INDF0, F,ACCESS
;bz SCEStrTrue
	BZ	SCESTRTRUE
;Check each char, exit if not equal
;movff POSTINC0, SysByteTempA
	MOVFF	POSTINC0, SYSBYTETEMPA
SYSSTRINGCOMP:
;Compare, exit if <>
;movf POSTINC0, W
	MOVF	POSTINC0, W,ACCESS
;cpfseq POSTINC1
	CPFSEQ	POSTINC1,ACCESS
;return
	RETURN
;decfsz SysByteTempA, F
	DECFSZ	SYSBYTETEMPA, F,ACCESS
;goto SysStringComp
	BRA	SYSSTRINGCOMP
SCESTRTRUE:
;setf SysByteTempX
	SETF	SYSBYTETEMPX,ACCESS
	RETURN

;********************************************************************************

;SOURCE: SYSTEM.H (1276)
SYSCOPYSTRING:
;Dim SysCalcTempA As Byte
;Dim SysStringLength As Byte
;Get and copy length for ChipFamily 16 support
;movff INDF0, SysCalcTempA
	MOVFF	INDF0, SYSCALCTEMPA
;movff SysCalcTempA, INDF1
	MOVFF	SYSCALCTEMPA, INDF1
;goto SysCopyStringCheck
	BRA	SYSCOPYSTRINGCHECK
;When appending, add length to counter
SYSCOPYSTRINGPART:
;movf INDF0, W
	MOVF	INDF0, W,ACCESS
;movwf SysCalcTempA
	MOVWF	SYSCALCTEMPA,ACCESS
;addwf SysStringLength, F
	ADDWF	SYSSTRINGLENGTH, F,ACCESS
SYSCOPYSTRINGCHECK:
;Exit if length = 0
;movf SysCalcTempA,F
	MOVF	SYSCALCTEMPA,F,ACCESS
;btfsc STATUS,Z
;A8: ASM Source was:  BTFSC STATUS,Z,ACCESS
	BTFSC	STATUS,2,ACCESS
;return
	RETURN
SYSSTRINGCOPY:
;Copy character
;movff PREINC0, PREINC1
	MOVFF	PREINC0, PREINC1
;decfsz SysCalcTempA, F
	DECFSZ	SYSCALCTEMPA, F,ACCESS
;goto SysStringCopy
	BRA	SYSSTRINGCOPY
	RETURN

;********************************************************************************

;SOURCE: SYSTEM.H (1473)
SYSREADSTRING:
;Dim SysCalcTempA As Byte
;Dim SysStringLength As Byte
;ChipFamily 16 support
;Get length
;TBLRD*+
	TBLRD*+
;movff TABLAT,SysCalcTempA
	MOVFF	TABLAT,SYSCALCTEMPA
;movff TABLAT,INDF1
	MOVFF	TABLAT,INDF1
;goto SysStringReadCheck
	BRA	SYSSTRINGREADCHECK
SYSREADSTRINGPART:
;TBLRD*+
	TBLRD*+
;movf TABLAT, W
	MOVF	TABLAT, W,ACCESS
;movwf SysCalcTempA
	MOVWF	SYSCALCTEMPA,ACCESS
;addwf SysStringLength,F
	ADDWF	SYSSTRINGLENGTH,F,ACCESS
;Check length
SYSSTRINGREADCHECK:
;If length is 0, exit
;movf SysCalcTempA,F
	MOVF	SYSCALCTEMPA,F,ACCESS
;btfsc STATUS,Z
;A8: ASM Source was:  BTFSC STATUS,Z,ACCESS
	BTFSC	STATUS,2,ACCESS
;return
	RETURN
;Copy
SYSSTRINGREAD:
;Copy char
;TBLRD*+
	TBLRD*+
;movff TABLAT,PREINC1
	MOVFF	TABLAT,PREINC1
;decfsz SysCalcTempA, F
	DECFSZ	SYSCALCTEMPA, F,ACCESS
;goto SysStringRead
	BRA	SYSSTRINGREAD
	RETURN

;********************************************************************************

SYSSTRINGTABLES:

STRINGTABLE1:
	DB	21,32,71,114,101,97,116,32,67,111,119,32,66,65,83,73,67,32,68,101,109,111

	ALIGN	2;X3

STRINGTABLE2:
	DB	8,49,56,70,49,54,81,52,49

	ALIGN	2;X3

STRINGTABLE3:
	DB	51,87,114,111,110,103,32,77,105,99,114,111,99,111,110,116,114,111,108,108,101,114
	DB	32,112,114,111,103,114,97,109,32,105,110,116,101,110,100,101,100,32,102,111,114,32
	DB	49,56,70,49,54,81,52,49

	ALIGN	2;X3

STRINGTABLE4:
	DB	25,84,104,101,32,77,105,99,114,111,99,111,110,116,114,111,108,108,101,114,32,105
	DB	115,32,97,32

	ALIGN	2;X3

STRINGTABLE5:
	DB	45,84,104,101,32,77,105,99,114,111,99,111,110,116,114,111,108,108,101,114,32,112
	DB	114,111,103,114,97,109,32,105,110,116,101,110,100,101,100,32,102,111,114,32,116,104
	DB	101,32

	ALIGN	2;X3

STRINGTABLE37:
	DB	0

	ALIGN	2;X3

STRINGTABLE69:
	DB	8,49,56,70,49,54,81,52,49

	ALIGN	2;X3

;********************************************************************************

;SOURCE: STRING.H (452)
FN_TRIM:
;trim = rtrim(ltrim(SysInString))
	MOVFF	SYSSYSINSTRINGHANDLER,SYSSYSINSTRING2HANDLER
	MOVFF	SYSSYSINSTRINGHANDLER_H,SYSSYSINSTRING2HANDLER_H
	RCALL	FN_LTRIM
	MOVLW	LOW LTRIM
	MOVWF	SYSSYSINSTRING3HANDLER,ACCESS
	MOVLW	HIGH LTRIM
	MOVWF	SYSSYSINSTRING3HANDLER_H,ACCESS
	RCALL	FN_RTRIM
	LFSR	1,TRIM
	LFSR	0,RTRIM
	BRA	SYSCOPYSTRING

;********************************************************************************

;SOURCE: STRING.H (487)
FN_UCASE:
;Get length of string, don't try copying if it's empty
;SysCharCount = SysInString(0)
;A6: ASM Source was:  MOVFF SYSSYSINSTRINGHANDLER,AFSR0
	MOVFF	SYSSYSINSTRINGHANDLER,FSR0
;A6: ASM Source was:  MOVFF SYSSYSINSTRINGHANDLER_H,AFSR0_H
	MOVFF	SYSSYSINSTRINGHANDLER_H,FSR0H
	MOVFF	INDF0,SYSCHARCOUNT
;UCase(0) = SysCharCount
	MOVFFL	SYSCHARCOUNT,SYSUCASE_0
;If SysCharCount = 0 Then Exit Function
	MOVF	SYSCHARCOUNT,F,ACCESS
;A8: ASM Source was:  BTFSC STATUS, Z,ACCESS
	BTFSC	STATUS,2,ACCESS
	RETURN
;Search string for lowercase letters, change to uppercase
;For SysStringTemp = 1 to SysCharCount
	BANKSEL	SYSSTRINGTEMP
	CLRF	SYSSTRINGTEMP,BANKED
	MOVLW	1
	SUBWF	SYSCHARCOUNT,W,ACCESS
;A8: ASM Source was:  BTFSS STATUS, C,ACCESS
	BTFSS	STATUS,0,ACCESS
	BRA	SYSFORLOOPEND2
SYSFORLOOP2:
	INCF	SYSSTRINGTEMP,F,BANKED
;SysStrData = SysInString(SysStringTemp)
	MOVF	SYSSTRINGTEMP,W,BANKED
	ADDWF	SYSSYSINSTRINGHANDLER,W,ACCESS
;A2: ASM Source was:  MOVWF AFSR0,ACCESS
;A4: ASM Source was:  MOVWF AFSR0,ACCESS
	MOVWF	FSR0,ACCESS
	MOVLW	0
	ADDWFC	SYSSYSINSTRINGHANDLER_H,W,ACCESS
;A2: ASM Source was:  MOVWF AFSR0_H,ACCESS
;A4: ASM Source was:  MOVWF AFSR0_H,ACCESS
	MOVWF	FSR0H,ACCESS
	MOVFF	INDF0,SYSSTRDATA
;If SysStrData >= 97 Then
	MOVLW	97
	SUBWF	SYSSTRDATA,W,ACCESS
;A8: ASM Source was:  BTFSS STATUS, C,ACCESS
	BTFSS	STATUS,0,ACCESS
	BRA	ENDIF9
;If SysStrData <= 122 Then SysStrData -= 32
	MOVF	SYSSTRDATA,W,ACCESS
	SUBLW	122
;A8: ASM Source was:  BTFSS STATUS, C,ACCESS
	BTFSS	STATUS,0,ACCESS
	BRA	ENDIF11
	MOVLW	32
	SUBWF	SYSSTRDATA,F,ACCESS
ENDIF11:
;End If
ENDIF9:
;UCase(SysStringTemp) = SysStrData
	LFSR	0,UCASE
	MOVF	SYSSTRINGTEMP,W,BANKED
;A2: ASM Source was:  ADDWF AFSR0,F,ACCESS
;A5: ASM Source was:  ADDWF AFSR0,F,ACCESS
	ADDWF	FSR0,F,ACCESS
	MOVLW	0
;A2: ASM Source was:  ADDWFC AFSR0_H,F,ACCESS
;A5: ASM Source was:  ADDWFC AFSR0_H,F,ACCESS
	ADDWFC	FSR0H,F,ACCESS
	MOVFF	SYSSTRDATA,INDF0
;Next
	MOVF	SYSCHARCOUNT,W,ACCESS
	SUBWF	SYSSTRINGTEMP,W,BANKED
;A8: ASM Source was:  BTFSS STATUS, C,ACCESS
	BTFSS	STATUS,0,ACCESS
	BRA	SYSFORLOOP2
SYSFORLOOPEND2:
	BANKSEL	0
	RETURN

;********************************************************************************

	ALIGN	2;X2
;
; Declare Power-On-Reset entry point
;
 END     RESETVEC
